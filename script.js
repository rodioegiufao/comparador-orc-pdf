// script.js - Vers√£o Corrigida
class SmartComparator {
    constructor() {
        this.materialsFile = null;
        this.budgetFile = null;
        this.materialsData = '';
        this.budgetData = '';
    }

    init() {
        this.bindEvents();
    }

    bindEvents() {
        document.getElementById('materialsFile').addEventListener('change', (e) => this.handleFileUpload(e, 'materials'));
        document.getElementById('budgetFile').addEventListener('change', (e) => this.handleFileUpload(e, 'budget'));
        document.getElementById('analyzeBtn').addEventListener('click', () => this.prepareForChatGPT());
    }

    async handleFileUpload(event, type) {
        const file = event.target.files[0];
        if (!file) {
            console.log('Nenhum arquivo selecionado para', type);
            return;
        }

        console.log('Arquivo selecionado:', file.name, 'Tipo:', type);
        
        const previewElement = document.getElementById(type + 'Preview');
        previewElement.innerHTML = '<p><strong>' + file.name + '</strong> - Carregando...</p>';

        try {
            if (type === 'materials') {
                this.materialsFile = file;
                this.materialsData = await this.extractMaterialsData(file);
                previewElement.innerHTML = '<p><strong>' + file.name + '</strong> ‚úÖ</p><small>' + (file.size / 1024).toFixed(1) + ' KB - Lista carregada</small>';
                console.log('Lista de materiais carregada com sucesso');
            } else {
                this.budgetFile = file;
                this.budgetData = await this.extractBudgetData(file);
                previewElement.innerHTML = '<p><strong>' + file.name + '</strong> ‚úÖ</p><small>' + (file.size / 1024).toFixed(1) + ' KB - Or√ßamento carregado</small>';
                console.log('Or√ßamento carregado com sucesso');
            }
        } catch (error) {
            console.error('Erro ao processar ' + type + ':', error);
            previewElement.innerHTML = '<p><strong>' + file.name + '</strong> ‚ùå Erro: ' + error.message + '</p>';
        } finally {
            this.checkFilesReady();
        }
    }

    async extractMaterialsData(file) {
        console.log('Extraindo dados da LISTA DE MATERIAIS...');
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    let materialsData = '=== LISTA DE MATERIAIS ===\n';
                    
                    workbook.SheetNames.forEach(sheetName => {
                        const worksheet = workbook.Sheets[sheetName];
                        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
                        
                        materialsData += `PLANILHA: ${sheetName}\n`;
                        materialsData += 'LINHA | DESCRI√á√ÉO (F) | ITEM (G) | QUANTIDADE (H) | UNIDADE (I)\n';
                        materialsData += '----------------------------------------------------------------\n';
                        
                        jsonData.forEach((row, index) => {
                            if (row && row.length > 0) {
                                const descricao = row[5] || '';
                                const item = row[6] || '';
                                const quantidade = row[7] || '';
                                let unidade = row[8] || '';
                                
                                if (unidade.toLowerCase() === 'p√ß' || unidade.toLowerCase() === 'pc') {
                                    unidade = 'un';
                                }
                                
                                if (descricao || item || quantidade || unidade) {
                                    materialsData += `LINHA ${index + 1}: "${descricao}" | "${item}" | ${quantidade} | ${unidade}\n`;
                                }
                            }
                        });
                        materialsData += '\n';
                    });
                    
                    console.log('Lista de materiais extra√≠da:', materialsData.length, 'caracteres');
                    resolve(materialsData);
                } catch (error) {
                    console.error('Erro na extra√ß√£o da lista de materiais:', error);
                    reject(error);
                }
            };
            
            reader.onerror = function(error) {
                console.error('Erro no FileReader:', error);
                reject(error);
            };
            
            reader.readAsArrayBuffer(file);
        });
    }

    async extractBudgetData(file) {
        console.log('Extraindo dados do OR√áAMENTO SINT√âTICO...');
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    let budgetData = '=== OR√áAMENTO SINT√âTICO ===\n';
                    
                    workbook.SheetNames.forEach(sheetName => {
                        const worksheet = workbook.Sheets[sheetName];
                        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
                        
                        budgetData += `PLANILHA: ${sheetName}\n`;
                        budgetData += 'LINHA | DESCRI√á√ÉO (D) | UNIDADE (E) | QUANTIDADE (F)\n';
                        budgetData += '----------------------------------------------------\n';
                        
                        jsonData.forEach((row, index) => {
                            if (row && row.length > 0) {
                                const descricao = row[3] || '';
                                const unidade = row[4] || '';
                                const quantidade = row[5] || '';
                                
                                if (descricao || unidade || quantidade) {
                                    budgetData += `LINHA ${index + 1}: "${descricao}" | ${unidade} | ${quantidade}\n`;
                                }
                            }
                        });
                        budgetData += '\n';
                    });
                    
                    console.log('Or√ßamento extra√≠do:', budgetData.length, 'caracteres');
                    resolve(budgetData);
                } catch (error) {
                    console.error('Erro na extra√ß√£o do or√ßamento:', error);
                    reject(error);
                }
            };
            
            reader.onerror = function(error) {
                console.error('Erro no FileReader:', error);
                reject(error);
            };
            
            reader.readAsArrayBuffer(file);
        });
    }

    checkFilesReady() {
        const btn = document.getElementById('analyzeBtn');
        const isReady = this.materialsFile && this.budgetFile;
        
        btn.disabled = !isReady;
    }

    async prepareForChatGPT() {
        console.log('Preparando prompt para ChatGPT...');
    
        if (!this.materialsFile || !this.budgetFile) {
            alert('‚ùå Por favor, carregue ambos os arquivos Excel primeiro.');
            return;
        }
    
        const apiKey = document.getElementById("apiKey").value.trim();
        if (!apiKey) {
            alert("‚ö†Ô∏è Digite sua API Key da OpenAI antes de continuar.");
            return;
        }
    
        // Resto do c√≥digo permanece igual...
        const prompt = this.createChatGPTPrompt();
        
        // Mostra loading
        document.getElementById("loading").style.display = "block";
    
        try {
            const response = await fetch("https://api.openai.com/v1/chat/completions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: "gpt-4o-mini",
                    messages: [
                        { role: "system", content: "Voc√™ √© um assistente especializado em an√°lise de diverg√™ncias de planilhas." },
                        { role: "user", content: prompt }
                    ],
                    temperature: 0
                })
            });
    
            const data = await response.json();
            console.log("Resposta da OpenAI:", data);
    
            if (data.error) {
                throw new Error(data.error.message);
            }
    
            const resposta = data.choices[0].message.content;
            displayChatGPTResponse(resposta);
    
        } catch (err) {
            alert("‚ùå Erro ao consultar OpenAI: " + err.message);
            console.error(err);
        } finally {
            document.getElementById("loading").style.display = "none";
        }
    }

    createChatGPTPrompt() {
        return `AN√ÅLISE ESPECIALIZADA: LISTA DE MATERIAIS vs OR√áAMENTO SINT√âTICO
    
    üìã LISTA DE MATERIAIS (Excel):
    - Coluna F: DESCRI√á√ÉO do material
    - Coluna G: NOME DO ITEM
    - Coluna H: QUANTIDADE
    - Coluna I: UNIDADE (converta "p√ß" para "un")
    
    üìä OR√áAMENTO SINT√âTICO (Excel):
    - Coluna D: DESCRI√á√ÉO do material
    - Coluna E: UNIDADE
    - Coluna F: QUANTIDADE
    
    ESTRAT√âGIA DE CORRESPOND√äNCIA - REGRAS CR√çTICAS PARA CABOS:
    
    1. **AGRUPAMENTO DE CABOS POR BITOLA:**
       - Quando encontrar cabos da MESMA BITOLA mas cores diferentes na Lista de Materiais, SOME as quantidades
       - Exemplo: 
         * Cabo 16mm¬≤ Azul: 51.2 m
         * Cabo 16mm¬≤ Branco: 51.2 m  
         * Cabo 16mm¬≤ Preto: 51.2 m
         * Cabo 16mm¬≤ Verde: 51.2 m
         * Cabo 16mm¬≤ Vermelho: 40.7 m
         ‚Üí TOTAL: 51.2 + 51.2 + 51.2 + 51.2 + 40.7 = 245.5 m
    
    2. **CORRESPOND√äNCIA COM OR√áAMENTO:**
       - No Or√ßamento, procure por descri√ß√µes como: "CABO", "16 MM¬≤", "16mm¬≤", "bitola 16"
       - Ignore diferen√ßas de cores, marcas e descri√ß√µes detalhadas
       - Foque na BITOLA e no TIPO DE CABO
    
    3. **PADR√ïES DE BUSCA NO OR√áAMENTO:**
       - Procure por: "CABO", "FIO", "CONDUTOR", "EL√âTRICO"
       - Combine com bitolas: "1.5", "2.5", "4", "6", "10", "16", "25", "35", "50", "70", "95", "120", "150", "185", "240" mm¬≤
       - Unidade deve ser "m" (metros)
    
    SEU OBJETIVO: Encontrar APENAS as diverg√™ncias entre os dois documentos.
    
    DADOS PARA AN√ÅLISE:
    
    ${this.materialsData}
    
    ${this.budgetData}
    
    INSTRU√á√ïES DETALHADAS:
    
    1. **NA LISTA DE MATERIAIS:** 
       - Combine "DESCRI√á√ÉO (F)" + "NOME DO ITEM (G)" para formar o nome completo
       - IDENTIFIQUE cabos pela BITOLA (ex: 1.5mm¬≤, 2.5mm¬≤, 16mm¬≤, etc.)
       - SOME quantidades de cabos da MESMA BITOLA, independente da cor
    
    2. **NO OR√áAMENTO:** 
       - Use "DESCRI√á√ÉO (D)" como refer√™ncia
       - Procure por termos gen√©ricos de cabos + bitolas
    
    3. **ENCONTRE CORRESPOND√äNCIAS:** 
       - Compare o TOTAL AGRUPADO por bitola da Lista com o valor do Or√ßamento
       - Seja FLEX√çVEL com nomenclaturas diferentes
    
    4. **COMPARE:** Quantidades totais por bitola
    
    5. **INCLUA APENAS ITENS COM DIVERG√äNCIA:**
       - üî¥ Quantidades DIFERENTES para o mesmo material/bitola
       - üü° Materiais/Bitolas na Lista mas N√ÉO no Or√ßamento (FALTANDO)
       - üîµ Materiais/Bitolas no Or√ßamento mas N√ÉO na Lista (EXTRAS)
    
    6. **EXCLUA ITENS SEM DIVERG√äNCIA:**
       - ‚ùå N√ÉO inclua materiais que est√£o IGUAIS nos dois documentos
       - ‚ùå N√ÉO inclua cabos com quantidades totais iguais
    
    FORMATO DE RESPOSTA (OBRIGAT√ìRIO):
    
    üìä RESUMO DAS DIVERG√äNCIAS ENCONTRADAS:
    
    üö® CABOS COM DIVERG√äNCIAS:
    
    BITOLA: [Ex: 16 mm¬≤]
    TOTAL LISTA: [soma de todas as cores] m
    OR√áAMENTO: [quantidade] m
    DIFEREN√áA: [+/- valor da diferen√ßa]
    STATUS: [QUANTIDADE DIFERENTE / FALTANDO NO OR√áAMENTO / EXTRA NO OR√áAMENTO]
    CORES ENCONTRADAS: [lista das cores com quantidades individuais]
    
    üö® OUTROS MATERIAIS COM DIVERG√äNCIAS:
    
    ITEM: [Nome completo do material]
    LISTA DE MATERIAIS: [quantidade] [unidade]
    OR√áAMENTO: [quantidade] [unidade]
    DIFEREN√áA: [+/- valor da diferen√ßa]
    STATUS: [QUANTIDADE DIFERENTE / FALTANDO NO OR√áAMENTO / EXTRA NO OR√áAMENTO]
    
    üìà RESUMO ESTAT√çSTICO:
    - Total de diverg√™ncias encontradas: [n√∫mero]
    - Cabos com problemas: [n√∫mero]
    - Materiais faltantes: [n√∫mero]
    - Materiais extras: [n√∫mero]
    - Diferen√ßas de quantidade: [n√∫mero]
    
    EXEMPLOS DE RESPOSTA:
    
    üö® CABOS COM DIVERG√äNCIAS:
    
    BITOLA: 2.5 mm¬≤
    TOTAL LISTA: 180.0 m
    OR√áAMENTO: 150.0 m
    DIFEREN√áA: -30.0
    STATUS: QUANTIDADE DIFERENTE
    CORES ENCONTRADAS: Azul (60m), Vermelho (60m), Verde-amarelo (60m)
    
    BITOLA: 25 mm¬≤
    TOTAL LISTA: 75.0 m
    OR√áAMENTO: N√ÉO ENCONTRADO
    DIFEREN√áA: -75.0
    STATUS: FALTANDO NO OR√áAMENTO
    CORES ENCONTRADAS: Preto (75m)
    
    üö® OUTROS MATERIAIS COM DIVERG√äNCIAS:
    
    ITEM: Lumin√°ria LED 20W
    LISTA DE MATERIAIS: 25 un
    OR√áAMENTO: N√ÉO ENCONTRADO
    DIFEREN√áA: -25
    STATUS: FALTANDO NO OR√áAMENTO
    
    ITEM: Parafuso Sextavado
    LISTA DE MATERIAIS: N√ÉO ENCONTRADO
    OR√áAMENTO: 100 un
    DIFEREN√áA: +100
    STATUS: EXTRA NO OR√áAMENTO
    
    üìà RESUMO ESTAT√çSTICO:
    - Total de diverg√™ncias encontradas: 4
    - Cabos com problemas: 2
    - Materiais faltantes: 2
    - Materiais extras: 1
    - Diferen√ßas de quantidade: 1
    
    REGRAS FINAIS CR√çTICAS:
    1. Para CABOS: Agrupe por bitola, some quantidades, ignore cores
    2. Para OUTROS MATERIAIS: Mantenha an√°lise individual
    3. Converta "p√ß" para "un" nas unidades
    4. Seja FLEX√çVEL com nomenclaturas diferentes
    5. Calcule TODAS as diferen√ßas num√©ricas
    6. INCLUA APENAS itens com diverg√™ncia
    7. EXCLUA itens que est√£o iguais nos dois documentos
    8. Mantenha este formato exato
    
    COME√áE A AN√ÅLISE DETALHADA E MOSTRE APENAS AS DIVERG√äNCIAS:`;
    }

    displayPrompt(prompt) {
        const resultsSection = document.getElementById('resultsSection');
        
        resultsSection.innerHTML = `
            <div class="prompt-section">
                <h3>üß† COLE ESTE PROMPT NO CHATGPT</h3>
                
                <textarea 
                    id="chatgptPrompt" 
                    readonly 
                    class="prompt-textarea"
                >${prompt}</textarea>
                
                <button onclick="copyToClipboard()" class="copy-btn">
                    üìã Copiar Prompt para ChatGPT
                </button>
                
                <div class="instructions">
                    <h4>üéØ ESTRAT√âGIA DE CORRESPOND√äNCIA:</h4>
                    <ul>
                        <li><strong>Lista de Materiais:</strong> Combine "Descri√ß√£o (F)" + "Item (G)"</li>
                        <li><strong>Or√ßamento:</strong> Use apenas "Descri√ß√£o (D)"</li>
                        <li><strong>Unidades:</strong> "p√ß" √© automaticamente convertido para "un"</li>
                        <li><strong>Seja flex√≠vel</strong> com pequenas diferen√ßas nos nomes dos materiais</li>
                    </ul>
                </div>
            </div>
        `;

        resultsSection.style.display = 'block';
        this.showResponseSection();

        window.copyToClipboard = () => {
            const textarea = document.getElementById('chatgptPrompt');
            textarea.select();
            document.execCommand('copy');
            alert('‚úÖ Prompt copiado! Cole no ChatGPT-4 para an√°lise.');
        };
    }

    showResponseSection() {
        const responseSection = document.getElementById('responseSection');
        responseSection.style.display = 'block';
        responseSection.scrollIntoView({ behavior: 'smooth' });
    }
}

// FUN√á√ÉO CORRIGIDA - Agora vai mostrar a resposta
function processChatGPTResponse() {
    const responseText = document.getElementById('chatgptResponse').value.trim();
    
    if (!responseText) {
        alert('‚ùå Por favor, cole a resposta do ChatGPT primeiro.');
        return;
    }
    
    // CORRE√á√ÉO: Chamar a fun√ß√£o correta
    displayChatGPTResponse(responseText);
}

// FUN√á√ÉO CORRIGIDA - Exibe a resposta do ChatGPT
function displayChatGPTResponse(responseText) {
    const resultsDisplay = document.getElementById('resultsDisplay');
    
    // CORRE√á√ÉO: Usar innerHTML corretamente
    resultsDisplay.innerHTML = `
        <div class="results-section">
            <h3>üìä RESPOSTA DO CHATGPT</h3>
            
            <div class="chatgpt-response">
                <pre>${responseText}</pre>
            </div>
            
            <div class="actions" style="margin-top: 20px;">
                <button onclick="copyResults()" class="export-btn" style="background: #3498db;">
                    üìã Copiar Resposta
                </button>
            </div>
        </div>
    `;
    
    resultsDisplay.style.display = 'block';
    resultsDisplay.scrollIntoView({ behavior: 'smooth' });
}

function clearResponse() {
    document.getElementById('chatgptResponse').value = '';
}

function copyResults() {
    const responseText = document.getElementById('chatgptResponse').value;
    navigator.clipboard.writeText(responseText).then(() => {
        alert('‚úÖ Resposta copiada!');
    });
}

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    window.smartComparator = new SmartComparator();
    window.smartComparator.init();
});
